/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => MyPlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian = require("obsidian");
var f = () => {
};
var id = -1;
var MyPlugin = class extends import_obsidian.Plugin {
  async onload() {
    f = () => {
      const activeFile = this.app.workspace.getActiveFile();
      if ((activeFile == null ? void 0 : activeFile.extension) === "md") {
        this.app.vault.process(activeFile, (data) => {
          return data.replace(/--(\S+)([\s\n])(\S+)([\s\n])/g, ">[!$1]$2$3$4");
        });
      }
    };
    id = setInterval(f, 8);
  }
  onunload() {
    if (id != -1) {
      clearInterval(id);
    }
  }
};
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsibWFpbi50cyJdLAogICJzb3VyY2VzQ29udGVudCI6IFsiaW1wb3J0IHtQbHVnaW59IGZyb20gJ29ic2lkaWFuJztcblxuLy8gUmVtZW1iZXIgdG8gcmVuYW1lIHRoZXNlIGNsYXNzZXMgYW5kIGludGVyZmFjZXMhXG5cbmludGVyZmFjZSBNeVBsdWdpblNldHRpbmdzIHtcblx0bXlTZXR0aW5nOiBzdHJpbmc7XG59XG5cblxubGV0IGYgPSAoKSA9PiB7fVxuXG5sZXQgaWQgPSAtMTtcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgTXlQbHVnaW4gZXh0ZW5kcyBQbHVnaW4ge1xuXHRzZXR0aW5nczogTXlQbHVnaW5TZXR0aW5ncztcblxuXHRcblxuXHRhc3luYyBvbmxvYWQoKSB7XG5cdFx0XG5cdFx0XG5cdFx0ZiA9ICgpID0+IHtcblx0XHRcdFxuXHRcdFx0Y29uc3QgYWN0aXZlRmlsZSA9IHRoaXMuYXBwLndvcmtzcGFjZS5nZXRBY3RpdmVGaWxlKCk7XG5cblx0XHRcdGlmKGFjdGl2ZUZpbGU/LmV4dGVuc2lvbiA9PT0gXCJtZFwiKXtcblx0XHRcdFx0dGhpcy5hcHAudmF1bHQucHJvY2VzcyhhY3RpdmVGaWxlLCAoZGF0YSkgPT4ge1xuXHRcdFx0XHRcdHJldHVybiBkYXRhLnJlcGxhY2UoLy0tKFxcUyspKFtcXHNcXG5dKShcXFMrKShbXFxzXFxuXSkvZywgXCI+WyEkMV0kMiQzJDRcIik7XG5cdFx0XHRcdH0pO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdGlkID0gc2V0SW50ZXJ2YWwoZiwgOCkgYXMgdW5rbm93biBhcyBudW1iZXI7XG5cblx0XHRcblx0fVxuXHRcblx0b251bmxvYWQoKSB7XG5cdFx0XG5cdFx0aWYoaWQgIT0gLTEpe1xuXHRcdFx0Y2xlYXJJbnRlcnZhbChpZCk7XG5cdFx0fVxuXHR9XG5cblx0XG59XG5cblxuXG5cbiJdLAogICJtYXBwaW5ncyI6ICI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSxzQkFBcUI7QUFTckIsSUFBSSxJQUFJLE1BQU07QUFBQztBQUVmLElBQUksS0FBSztBQUVULElBQXFCLFdBQXJCLGNBQXNDLHVCQUFPO0FBQUEsRUFLNUMsTUFBTSxTQUFTO0FBR2QsUUFBSSxNQUFNO0FBRVQsWUFBTSxhQUFhLEtBQUssSUFBSSxVQUFVLGNBQWM7QUFFcEQsV0FBRyx5Q0FBWSxlQUFjLE1BQUs7QUFDakMsYUFBSyxJQUFJLE1BQU0sUUFBUSxZQUFZLENBQUMsU0FBUztBQUM1QyxpQkFBTyxLQUFLLFFBQVEsaUNBQWlDLGNBQWM7QUFBQSxRQUNwRSxDQUFDO0FBQUEsTUFDRjtBQUFBLElBQ0Q7QUFFQSxTQUFLLFlBQVksR0FBRyxDQUFDO0FBQUEsRUFHdEI7QUFBQSxFQUVBLFdBQVc7QUFFVixRQUFHLE1BQU0sSUFBRztBQUNYLG9CQUFjLEVBQUU7QUFBQSxJQUNqQjtBQUFBLEVBQ0Q7QUFHRDsiLAogICJuYW1lcyI6IFtdCn0K
