/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => MyPlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian = require("obsidian");
var f = () => {
};
var id = -1;
var MyPlugin = class extends import_obsidian.Plugin {
  async onload() {
    f = () => {
      const activeFile = this.app.workspace.getActiveFile();
      if ((activeFile == null ? void 0 : activeFile.extension) === "md") {
        this.app.vault.process(activeFile, (data) => {
          return data.replace(/--(\S+)([\s\n])(\S+)([\s\n])/g, ">[!$1]$2$3$4");
        });
      }
    };
    const id2 = setInterval(f, 10);
  }
  onunload() {
    if (id != -1) {
      clearInterval(id);
    }
  }
};
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsibWFpbi50cyJdLAogICJzb3VyY2VzQ29udGVudCI6IFsiaW1wb3J0IHtQbHVnaW59IGZyb20gJ29ic2lkaWFuJztcclxuXHJcbi8vIFJlbWVtYmVyIHRvIHJlbmFtZSB0aGVzZSBjbGFzc2VzIGFuZCBpbnRlcmZhY2VzIVxyXG5cclxuaW50ZXJmYWNlIE15UGx1Z2luU2V0dGluZ3Mge1xyXG5cdG15U2V0dGluZzogc3RyaW5nO1xyXG59XHJcblxyXG5jb25zdCBERUZBVUxUX1NFVFRJTkdTOiBNeVBsdWdpblNldHRpbmdzID0ge1xyXG5cdG15U2V0dGluZzogJ2RlZmF1bHQnXHJcbn1cclxuXHJcbmxldCBmID0gKCkgPT4ge31cclxuXHJcbmxldCBpZCA9IC0xO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgTXlQbHVnaW4gZXh0ZW5kcyBQbHVnaW4ge1xyXG5cdHNldHRpbmdzOiBNeVBsdWdpblNldHRpbmdzO1xyXG5cclxuXHRcclxuXHJcblx0YXN5bmMgb25sb2FkKCkge1xyXG5cdFx0XHJcblx0XHRcclxuXHRcdGYgPSAoKSA9PiB7XHJcblx0XHRcdFxyXG5cdFx0XHRjb25zdCBhY3RpdmVGaWxlID0gdGhpcy5hcHAud29ya3NwYWNlLmdldEFjdGl2ZUZpbGUoKTtcclxuXHJcblx0XHRcdGlmKGFjdGl2ZUZpbGU/LmV4dGVuc2lvbiA9PT0gXCJtZFwiKXtcclxuXHRcdFx0XHR0aGlzLmFwcC52YXVsdC5wcm9jZXNzKGFjdGl2ZUZpbGUsIChkYXRhKSA9PiB7XHJcblx0XHRcdFx0XHRyZXR1cm4gZGF0YS5yZXBsYWNlKC8tLShcXFMrKShbXFxzXFxuXSkoXFxTKykoW1xcc1xcbl0pL2csIFwiPlshJDFdJDIkMyQ0XCIpO1xyXG5cdFx0XHRcdH0pO1xyXG5cdFx0XHR9XHJcblx0XHR9XHJcblxyXG5cdFx0Y29uc3QgaWQgPSBzZXRJbnRlcnZhbChmLDEwKTtcclxuXHJcblx0XHRcclxuXHR9XHJcblx0XHJcblx0b251bmxvYWQoKSB7XHJcblx0XHRcclxuXHRcdGlmKGlkICE9IC0xKXtcclxuXHRcdFx0Y2xlYXJJbnRlcnZhbChpZCk7XHJcblx0XHR9XHJcblx0fVxyXG5cclxuXHRcclxufVxyXG5cclxuXHJcblxyXG5cclxuIl0sCiAgIm1hcHBpbmdzIjogIjs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLHNCQUFxQjtBQVlyQixJQUFJLElBQUksTUFBTTtBQUFDO0FBRWYsSUFBSSxLQUFLO0FBRVQsSUFBcUIsV0FBckIsY0FBc0MsdUJBQU87QUFBQSxFQUs1QyxNQUFNLFNBQVM7QUFHZCxRQUFJLE1BQU07QUFFVCxZQUFNLGFBQWEsS0FBSyxJQUFJLFVBQVUsY0FBYztBQUVwRCxXQUFHLHlDQUFZLGVBQWMsTUFBSztBQUNqQyxhQUFLLElBQUksTUFBTSxRQUFRLFlBQVksQ0FBQyxTQUFTO0FBQzVDLGlCQUFPLEtBQUssUUFBUSxpQ0FBaUMsY0FBYztBQUFBLFFBQ3BFLENBQUM7QUFBQSxNQUNGO0FBQUEsSUFDRDtBQUVBLFVBQU1BLE1BQUssWUFBWSxHQUFFLEVBQUU7QUFBQSxFQUc1QjtBQUFBLEVBRUEsV0FBVztBQUVWLFFBQUcsTUFBTSxJQUFHO0FBQ1gsb0JBQWMsRUFBRTtBQUFBLElBQ2pCO0FBQUEsRUFDRDtBQUdEOyIsCiAgIm5hbWVzIjogWyJpZCJdCn0K
